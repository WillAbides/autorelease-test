#!/bin/sh

set -e

CDPATH="" cd -- "$(dirname -- "$0")/.."

[ -n "$GITHUB_TOKEN" ] || {
  echo GITHUB_TOKEN must be set
  exit 1
}

if [ "$(git rev-parse --is-shallow-repository)" != "false" ]; then
  echo "script/release cannot be run on a shallow clone"
  exit 1
fi

script/bindown -q install semver-next
script/bindown -q install gh
script/bindown -q install goreleaser

git fetch --tags

GITHUB_SHA="${GITHUB_SHA:-"$(git rev-parse HEAD)"}"
GITHUB_REPOSITORY="${GITHUB_REPOSITORY:-"WillAbides/autorelease-test"}"

PREV_REF="$(git describe --tags --abbrev=0 --match='v[0-9]*.[0-9]*.[0-9]*' 2>/dev/null || true)"
PREV_VERSION="$PREV_REF"
if [ -z "$PREV_REF" ]; then
  PREV_REF="$(git rev-list --max-parents=0 HEAD)"
  PREV_VERSION="0.0.0"
fi

RES="$(bin/semver-next "$GITHUB_REPOSITORY" -r "$GITHUB_SHA" -p "$PREV_REF" -v "$PREV_VERSION" --json)"
NEXT_VERSION="$(echo "$RES" | jq -r .next_version)"
CHANGE_LEVEL="$(echo "$RES" | jq -r .change_level)"

if [ "$CHANGE_LEVEL" = "no change" ]; then
  echo "No changes since last release"
  exit 0
fi

MODULE_NAME="$(go list -m)"
MAJOR_VERSION="$(echo "$NEXT_VERSION" | cut -d. -f1)"
MODULE_VERSION_SUFFIX="$(echo "$MODULE_NAME" | grep -o '/v[0-9][0-9]*$' || true)"

# If MAJOR_VERSION >= 2, make sure the module name ends with `/v$MAJOR_VERSION`
if [ "$MAJOR_VERSION" -ge 2 ]; then
  if [ "$MODULE_VERSION_SUFFIX" != "/v$MAJOR_VERSION" ]; then
    echo "Module name must end with /v$MAJOR_VERSION"
    exit 1
  fi
else
  if [ -n "$MODULE_VERSION_SUFFIX" ]; then
    echo "Module name must not end with /v[0-9][0-9]*"
    exit 1
  fi
fi

git tag -a -m "v$NEXT_VERSION" "v$NEXT_VERSION"
bin/goreleaser release
